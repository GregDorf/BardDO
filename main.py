import os
import subprocess
import telebot
from telebot import types
import scripts.classes.storage as storage

bot = telebot.TeleBot('7474019137:AAHaSJjv1gh8i2-0pbILc4YuU5s30K4sQYs')

user_files = {}

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
input_folder = os.path.join(os.getcwd(), 'input')

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(input_folder):
    os.makedirs(input_folder)

def exec_script(script_path):
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python-—Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ subprocess.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    try:
        script_dir, script_name = os.path.split(script_path)
        command = f'cd "{script_dir}" && python "{script_name}"'

        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"–°–∫—Ä–∏–ø—Ç {script_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            return True
        else:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {script_name}: {result.stderr}")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {script_path}: {e}")
        return False

def send_result_file(chat_id, result_file_path, file_caption):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        with open(result_file_path, 'rb') as file:
            bot.send_document(chat_id, file, caption=file_caption)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

def show_main_menu(chat_id):
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞—á–∞—Ç—å", "FAQ", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞".
    """
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üöÄ –ù–∞—á–∞—Ç—å!', callback_data='go')
    btn2 = types.InlineKeyboardButton('FAQ ‚ÅâÔ∏è', callback_data='info')
    btn3 = types.InlineKeyboardButton('‚úçÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='help')
    markup.row(btn1)
    markup.row(btn2, btn3)

    file = open('photo.jpg', 'rb')  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_photo(
        chat_id,
        file,
        caption='üéµ –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n\n'
                '–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å:\n'
                '- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –≤ MIDI\n'
                '- –°–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ—Ç\n'
                '- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º —Ç–∞–±—É–ª–∞—Ç—É—Ä.\n\n'
                'üöÄ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.',
        parse_mode='html',
        reply_markup=markup
    )

def show_info(chat_id):
    """
    –ú–µ–Ω—é FAQ.
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='main_menu'))
    bot.send_message(chat_id, '‚ÑπÔ∏è FAQ: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å, —Å–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.', reply_markup=markup)

def show_help(chat_id):
    """
    –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='main_menu'))
    bot.send_message(chat_id, '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @Gr0G0R', reply_markup=markup)

def show_go(chat_id):
    """
    –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º.
    """
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ MIDI', callback_data='midi')
    btn2 = types.InlineKeyboardButton('üéº –°–æ–∑–¥–∞—Ç—å –Ω–æ—Ç—ã', callback_data='nots')
    btn3 = types.InlineKeyboardButton('üé∏ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã', callback_data='tabulatures')
    btn4 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='main_menu')
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(
        chat_id,
        'üé∂ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='html',
        reply_markup=markup
    )

def process_action(action, chat_id):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π (MIDI, –Ω–æ—Ç—ã, —Ç–∞–±—É–ª–∞—Ç—É—Ä—ã).
    """
    scripts = {
        'midi': 'scripts/notes_to_midi.py',
        'nots': 'scripts/notes_to_sheet_music.py',
        'tabulatures': 'scripts/notes_to_tabs.py'
    }

    if chat_id not in user_files:
        bot.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
        return

    file_info = user_files[chat_id]
    file_name = file_info['file_name']
    storage.save_file_name(file_name)

    recognition_script = os.path.join(os.getcwd(), 'scripts', 'recognition.py')
    if not os.path.exists(recognition_script):
        bot.send_message(chat_id, "‚ùå –°–∫—Ä–∏–ø—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    bot.send_message(chat_id, "üîÑ –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
    if not exec_script(recognition_script):
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")
        return

    # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    if action in scripts:
        action_script = os.path.join(os.getcwd(), scripts[action])
        bot.send_message(chat_id, f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {action}...")
        if not exec_script(action_script):
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {action}.")
            return

        file_name = storage.load_file_name()

        result_files = {
            'midi': f'output/{file_name}_MIDI.mid',
            'nots': f'output/{file_name}_NOTES.pdf',
            'tabulatures': f'output/{file_name}_TABS.pdf'
        }

        result_file_path = os.path.join(os.getcwd(), result_files[action])
        send_result_file(chat_id, result_file_path, f"–í–æ—Ç –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {action}!")
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

def convert_to_wav(file_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç WAV —Å –ø–æ–º–æ—â—å—é ffmpeg.
    –ó–∞–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ WAV.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ WAV
        output_file = os.path.splitext(file_path)[0] + '.wav'

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç WAV
        command = f'ffmpeg -y -i "{file_path}" -vn -acodec pcm_s16le -ar 44100 -ac 2 "{output_file}"'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)

        if result.returncode != 0:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr}")
            return None

        print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ WAV: {output_file}")

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        print(f"–£–¥–∞–ª—ë–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {file_path}")

        return output_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return None


@bot.callback_query_handler(func=lambda callback: True)
def handle_callback(callback):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)

    if callback.data == 'go':
        bot.send_message(chat_id, "üé∂ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    elif callback.data == 'info':
        show_info(chat_id)
    elif callback.data == 'help':
        show_help(chat_id)
    elif callback.data == 'main_menu':
        show_main_menu(chat_id)
    elif callback.data in ['midi', 'nots', 'tabulatures']:
        process_action(callback.data, chat_id)

@bot.message_handler(commands=['start', 'menu'])
def start(message):
    show_main_menu(message.chat.id)

@bot.message_handler(content_types=['audio', 'document', 'voice'])
def handle_file(message):
    chat_id = message.chat.id
    file_id = None
    file_name = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if message.content_type == 'document':
        file_name = message.document.file_name
        file_id = message.document.file_id
    elif message.content_type == 'audio':
        file_name = message.audio.file_name or f"{message.audio.file_id}.mp3"
        file_id = message.audio.file_id
    elif message.content_type == 'voice':
        file_name = f"{message.voice.file_id}.ogg"
        file_id = message.voice.file_id

    if file_id and file_name:
        file_info = bot.get_file(file_id)
        file_path = os.path.join(input_folder, file_name)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª MP3 –∏–ª–∏ OGG, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        if file_name.endswith(('.mp3', '.ogg')):
            converted_file = convert_to_wav(file_path)
            if converted_file:
                user_files[chat_id] = {'file_id': file_id, 'file_name': os.path.basename(converted_file)}
                bot.reply_to(message, f"–§–∞–π–ª {file_name} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ WAV. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
                show_go(chat_id)
            else:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
        elif file_name.endswith('.wav'):
            user_files[chat_id] = {'file_id': file_id, 'file_name': file_name}
            bot.reply_to(message, f"–§–∞–π–ª {file_name} –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!")
            show_go(chat_id)
        else:
            bot.reply_to(message, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ MP3, WAV –∏–ª–∏ OGG.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

bot.polling(none_stop=True)
